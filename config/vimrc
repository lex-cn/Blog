syntax on		"设置语法高亮
filetype on
filetype plugin on
filetype indent on	"自动检测文件类型并进行缩进高亮

"----------set 系列---------
set sessionoptions+=unix,slash
set fileformat=unix
set autochdir "设置根据打开文件自动更换目录
set number      	    " 设置行号
set foldenable
"set fdm=indent          " 设置折叠
set foldlevel=0
set foldmarker={{{,}}} " 折叠标志，这个是默认的
set foldcolumn=0       " 折叠位宽
if has('win32')
    set guifont=Consolas:h14
    set gfw=SimHei:h14
endif
if has('unix')
    set guifont=DejaVu\ Sans\ Mono\ 14 "Noto\ Mono\ Regular\ 14
endif
set nobomb
set nocompatible	    " 避免以前版本的一些bug和局限
set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936,chinese
set encoding=utf-8
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
set backspace=2		    " 使backspace键可以删除
set scrolloff=3         " 光标移动到buffer的顶部和底部时保持3行距离
set formatoptions=tcrqn " 自动格式化
set autoindent          " 继承前一行的缩进方式，特别适用于多行注释
set expandtab           " 用空格代替制表符
set showmatch           " 显示匹配的括号
set matchtime=5         " 匹配括号高亮的时间（单位是十分之一秒）
set noignorecase          " 在搜索的时候忽略大小写
set incsearch           " 在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）
set hlsearch
set novisualbell        " 不要闪烁
set cursorline          " 高亮显示当前行
set grepprg=grep\ -nH\ $*
set autoread            " 设置当文件被改动时自动载入
set autowrite           "自动保存
set tabstop=4           "设置制表符宽度"
set softtabstop=4
"set textwidth=80
"set fo+=tMm
set cc=81
set nowrap                "设置自动断行
set shiftwidth=4        "设置缩进的空格数"
set nobackup            "禁止生成备份文件"
set noswapfile          "禁止生成swap文件"
set iskeyword+=_,$,@,%,#,- " 带有如下符号的单词不要被换行分割
set shortmess-=S
set report=0 " 通过使用: commands命令，告诉我们文件的哪一行被改变过
set shortmess=atI                                     "去掉欢迎界面 " 禁止显示菜单和工具条
set guioptions-=m  "隐藏菜单栏"
set guioptions-=T   "隐藏工具栏"
set guioptions-=r
set guioptions-=L
"setlocal spell spelllang=en_us,de_de,cjk
set nospell

map <F4> :set wrap!<CR>
noremap cf :e <cfile><cr>
noremap df :silent call system("rm -f ".expand("<cfile>"))<cr>

set clipboard=unnamed "共享剪贴板
vmap cc :w !xsel -i -b<CR><CR> " Copy to X CLIPBOARD

"set dictionary+=./words.txt   "设置字典，文本目录下的字典文件words.txt将被自动加载"
"set dictionary+=../../words.txt

if has("autocmd")
    " 记住上次文件打开的位置
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    au BufRead      *.py2,*.py3 set filetype=python
    au BufRead      *.sh        set filetype=bash
    au BufRead      *.snippets  set filetype=snippets
    "au InsertLeave * silent! w  " 放弃了，太慢了
    nnoremap gO :!open <cfile><CR>
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let s:extfname = expand("%:e")
if s:extfname ==? "f90"
    let fortran_free_source=1
    unlet! fortran_fixed_source
elseif s:extfname ==? "F90"
    let fortran_free_source=1
    unlet! fortran_fixed_source
else
    let fortran_fixed_source=1
    unlet! fortran_free_source
endif
let fortran_more_precise=1
"去掉固定格式每行开头的红色填充
let fortran_have_tabs=1
"允许折叠
let fortran_do_enddo=1
let fortran_fold=1
let fortran_fold_conditionals=1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command InsPlug :! curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

if empty(glob($HOME."/.vim/autoload/plug.vim"))
    echo 'No Bundle, Try InsBundle'
    finish
endif

call plug#begin()

"文件目录
Plug 'scrooloose/nerdtree'
map <F2> :silent! NERDTreeToggle<CR>
let NERDTreeAutoCenter=1      " 控制当光标移动超过一定距离时，是否自动将焦点调整到屏中心 "
let NERDTreeMouseMode=2       " 指定鼠标模式（1.双击打开；2.单目录双文件；3.单击打开）
let NERDTreeShowBookmarks=1   " 是否默认显示书签列表
let NERDTreeShowFiles=1       " 是否默认显示文件
let NERDTreeShowHidden=0      " 是否默认显示隐藏文件
let NERDTreeShowLineNumbers=1 " 是否默认显示行号
let NERDTreeMinimalUI=1       " 不显示帮助面板
let NERDTreeDirArrows=0       " 目录箭头 1 显示箭头  0传统+-|号
let NERDTreeIgnore=['\.mod$','\.html$','\tags$','\.toc$','\.aux$','\.pdf$','\.out$','\.log$']
let NERDTree_Exit_OnlyWindow=1
let NERDTreeWinSize=25
"au VimEnter *  NERDTree

Plug 'godlygeek/tabular'  
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
let g:pandoc#spell#enabled=0
let g:tex_conceal=''
let g:pandoc#biblio#use_bibtool=1
let g:pandoc#syntax#conceal#use=0
let g:pandoc#syntax#codeblocks#embeds#langs = ["python","c","cpp", "bash=sh"]
let g:pandoc#folding#level=10

Plug 'dstein64/vim-startuptime'
Plug 'tpope/vim-fugitive'
"Plug 'tpope/vim-surround'
Plug 'airblade/vim-gitgutter'
"Plug 'mileszs/ack.vim'

Plug 'itchyny/lightline.vim'
set laststatus=2 "显示状态栏
set noshowmode " 状态栏下面不在单独显示模式

" 配置lightline主题 let 就是定义了一个全局变量
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified'] ],
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \ },
    \ }

Plug 'majutsushi/tagbar'
let g:tagbar_ctags_bin='ctags'            "ctags程序的路径
let g:tagbar_width=30                    "窗口宽度的设置
"let g:tagbar_vertical=30 "窗口宽度的设置
let g:tagbar_autofocus=1
map <F3> :Tagbar<CR>
let Tlist_Auto_Open=1
let Tlist_Use_Right_Window = 1     " 在右侧显示窗口
let Tlist_Compart_Format = 1       " 压缩方式
let Tlist_Show_One_File = 1        " 不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exist_OnlyWindow = 1     " 如果只有一个buffer，kill窗口也kill掉buffer
let Tlist_File_Fold_Auto_Close = 0 " 不要关闭其他文件的tags
let Tlist_Enable_Fold_Column = 0   " 不要显示折叠树
let Tlist_Exit_OnlyWindow=1
if has('win32')
    let Tlist_Ctags_Cmd = 'ctags.exe'
endif
let tlist_make_settings  = 'make;m:makros;t:targets'

"Template""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
let g:UltiSnipsSnippetDirectories=["UltiSnips", $HOME.'/.snippets/']

if (v:version < 800)
    "语法检查 
    Plug 'vim-syntastic/syntastic'
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    "let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    let g:syntastic_check_on_open=1
    "let g:syntastic_always_populate_loc_list=1
    let g:syntastic_cpp_include_dirs = ['/usr/include/']
    let g:syntastic_cpp_remove_include_errors = 1
    let g:syntastic_cpp_check_header = 1
    "let g:syntastic_cpp_compiler = 'clang++'
    "let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
    "whether to show balloons
    let g:syntastic_enable_balloons = 1
    
    finish
endif

"""""Plug version > 8 """"""""""""""""""""""""""""""""""""""""""""""""""""""""

"符号索引 
Plug 'ludovicchabant/vim-gutentags' 

let $GTAGSLABEL = 'native-pygments' " 'native'
let $GTAGSCONF = expand('~/.gtags.conf')
"let g:gutentags_ctags_executable = expand('~/Projects/bins/bin/universal-ctags')
let g:gutentags_define_advanced_commands = 1
" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" 所生成的数据文件的名称
au BufRead,BufEnter * let g:gutentags_ctags_tagfile = &filetype.'.tags'
"let g:gutentags_ctags_tagfile = &filetype.'.tags'
" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
    let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
    let g:gutentags_modules += ['gtags_cscope']
endif

let g:gutentags_ctags_exclude=['*.trace']

" 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
" 检测 ~/.cache/tags 不存在就新建 "
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif


" 配置 ctags 的参数
let g:gutentags_ctags_extra_args  = ['--fields=+niazSl']

if &filetype=='cpp'
    let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
endif
if &filetype=='c'
    let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
endif

if &filetype=='fortran'
    let g:gutentags_ctags_extra_args += ['--fortran-kinds=+imv']
endif

" Get ctags version
let g:ctags_version = system('ctags --version')[0:8]

" 如果使用 universal ctags 需要增加下面一行
if g:ctags_version == "Universal"
    let g:gutentags_ctags_extra_args += ['--extras=+q', '--output-format=e-ctags']
    if &filetype=='markdown'
        let g:gutentags_ctags_extra_args += ['--markdown-kinds=+cs']
    endif
endif

let g:gutentags_auto_add_gtags_cscope = 1 " 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_plus_switch = 1 "Change focus to quickfix window after search (optional).
"Enable advanced commands: GutentagsToggleTrace, etc.
let g:gutentags_define_advanced_commands = 1
let g:gutentags_trace = 0 "调试程序

""cscope
if has("cscope")
    if executable('gtags-cscope') && executable('gtags')
        "禁用原GscopeFind按键映射
        let g:gutentags_plus_nomap = 1
        "Find this C symbol 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
        nmap <C-\>s :GscopeFind s <C-R>=expand("<cword>")<CR><CR>
        "Find this difinition 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
        nmap <C-\>g :GscopeFind g <C-R>=expand("<cword>")<CR><CR>
        "Find functions called by this function 查找本函数调用的函数
        nmap <C-\>d :GscopeFind d <C-R>=expand("<cword>")<CR><CR>
        "Find functions calling this function 查找调用本函数的函数
        nmap <C-\>c :GscopeFind c <C-R>=expand("<cword>")<CR><CR>
        "Find this text string 查找指定的字符串
        nmap <C-\>t :GscopeFind t <C-R>=expand("<cword>")<CR><CR>
        "Find this egrep pattern 查找egrep模式，相当于egrep功能，但查找速度快多了
        nmap <C-\>e :GscopeFind e <C-R>=expand("<cword>")<CR><CR>
        "Find this file 查找并打开文件，类似vim的能
        nmap <C-\>f :GscopeFind f <C-R>=expand("<cfile>")<CR><CR>
        "Find files #including this file 查找包含本文件的文件
        nmap <C-\>i :GscopeFind i ^<C-R>=expand("<cfile>")<CR>$<CR>
    else
        set csto=1
        set cst
        set nocsverb
        " add any database in current directory
        if filereadable("cscope.out")
            cs add cscope.out
        endif
        set csverb

        nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
        nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>

        nmap <C-F12> :cs add cscope.out<CR>
        "--language-force=C++
        nmap <S-F12> :!cscope -Rbkq<CR>
        " cscope参数
        "-R: 在生成索引文件时，搜索子目录树中的代码
        "-b: 只生成索引文件，不进入cscope的界面
        "-d: 只调出cscope gui界面，不跟新cscope.out
        "-k: 在生成索引文件时，不搜索/usr/include目录
        "-q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度
        "-i: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用"-"，表示由标准输入获得文件列表。
        "-I dir: 在-I选项指出的目录中查找头文件
        "-u: 扫描所有文件，重新生成交叉索引文件
        "-C: 在搜索时忽略大小写
        "-P path: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用
    endif
endif

Plug 'Yggdroot/indentLine'
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }

" don't show the help in normal mode
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_RootMarkers = ['.project', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_IgnoreCurrentBufferName = 1
" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

let g:Lf_ShortcutF = "<leader>ff"
noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

" should use `Leaderf gtags --update` first
let g:Lf_GtagsAutoGenerate = 0
let g:Lf_Gtagslabel = 'native-pygments'

"noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
"noremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
"noremap <leader>fo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
"noremap <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
"noremap <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

let g:Lf_CursorBlink =1 
"let g:Lf_DefaultExternalTool = 'rg'
"let g:Lf_WildIgnore={ 'file':['*.lib', '*.a', '*.o', '*.d', '*.so', ],'dir':['tmp', '.git', 'api', 'attachments', 'images', 'img', 'download',  ]}
"nmap <unique> <leader>fr <Plug>LeaderfRgPrompt
"nmap <unique> <leader>fra <Plug>LeaderfRgCwordLiteralNoBoundary
"nmap <unique> <leader>frb <Plug>LeaderfRgCwordLiteralBoundary
"nmap <unique> <leader>frc <Plug>LeaderfRgCwordRegexNoBoundary
"nmap <unique> <leader>frd <Plug>LeaderfRgCwordRegexBoundary
"vmap <unique> <leader>fra <Plug>LeaderfRgVisualLiteralNoBoundary
"vmap <unique> <leader>frb <Plug>LeaderfRgVisualLiteralBoundary
"vmap <unique> <leader>frc <Plug>LeaderfRgVisualRegexNoBoundary
"vmap <unique> <leader>frd <Plug>LeaderfRgVisualRegexBoundary


set completeopt=menu

Plug 'dense-analysis/ale'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_set_loclist = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
let g:ale_lint_on_text_changed='never' "文件内容发生变化时不检查
let g:ale_lint_on_enter = 0  "打开文件时不检查

"使用clang对c和c++进行语法检查，对python使用pylint进行语法检查
"let g:ale_linters = {
"\   'c++': ['clang'],
"\   'c': ['clang'],
"\   'python': ['pyflakes'],
"\}
"
Plug 'morhetz/gruvbox'


call plug#end()            " required
colorscheme desert
set bg=dark

