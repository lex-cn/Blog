set nocompatible              " be iMproved, required
filetype off                  " required

"==============================================================================
"set rtp+=C:\Users\Lex\Desktop\gVimPortable\Data\settings\vimfiles\bundle\Vundle.vim
"command insv:!git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle
set rtp+=~/.vim/bundle/

" ==============================================================================
" 安装的所有插件
call vundle#begin()

" 必须安装，let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

"文件目录
Plugin 'scrooloose/nerdtree'
"autocmd VimEnter * NERDTree
"wincmd w
"autocmd VimEnter * wincmd w
map <F2> :silent! NERDTreeToggle<CR>
let NERDTreeWinPos="left"
" 控制当光标移动超过一定距离时，是否自动将焦点调整到屏中心 "let NERDTreeAutoCenter=1
" 指定鼠标模式（1.双击打开；2.单目录双文件；3.单击打开）
let NERDTreeMouseMode=2
" 是否默认显示书签列表
let NERDTreeShowBookmarks=1
" 是否默认显示文件
let NERDTreeShowFiles=1
" 是否默认显示隐藏文件
let NERDTreeShowHidden=0
" 是否默认显示行号
let NERDTreeShowLineNumbers=1
" 窗口位置（'left' or 'right'）
let NERDTreeWinPos='left'
" 窗口宽
let NERDTreeMinimalUI=1 "不显示帮助面板
let NERDTreeDirArrows=0 "目录箭头 1 显示箭头  0传统+-|号
let NERDTreeIgnore=['\.mod$','\.html$','\tags$','\.toc$','\.aux$','\.pdf$','\.out$','\.log$']
let NERDTree_Exit_OnlyWindow=1
let NERDTreeWinSize=25

"Plugin 'vim-scripts/Vim-R-plugin'
Plugin 'tomasr/molokai'
let g:molokai_original = 1
let g:rehash256 = 1

Plugin 'plasticboy/vim-markdown'
let g:vim_markdown_math = 1
let g:vim_markdown_folding_level = 6
let g:vim_markdown_folding_disabled = 1

Plugin 'godlygeek/tabular'

"快速查找
"Plugin 'kien/ctrlp.vim'
"Plugin 'Yggdroot/LeaderF'
Plugin 'tpope/vim-fugitive'
"Plugin 'airblade/vim-gitgutter'
Plugin 'mileszs/ack.vim'

"语法检查 {{{
Plugin 'vim-syntastic/syntastic'

let g:syntastic_check_on_open=1
let g:syntastic_always_populate_loc_list=1
let g:syntastic_cpp_include_dirs = ['/usr/include/']
let g:syntastic_cpp_include_dirs = ['C:/Program Files/mingw-w64/x86_64-7.2.0-win32-seh-rt_v5-rev1/mingw64/x86_64-w64-mingw32/include']
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
"let g:syntastic_cpp_compiler = 'clang++'
"let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
"whether to show balloons
let g:syntastic_enable_balloons = 1

"}}}

"自动补全 Plugin 'vim-scripts/OmniCppComplete' {{{
"Plugin 'Shougo/neocomplcache.vim'
"let g:neocomplcache_enable_at_startup = 1
"}}}


"符号索引 

Plugin 'ludovicchabant/vim-gutentags' 

"let $GTAGSLABEL = 'native'
let $GTAGSCONF = '/home/lex/.gtags.conf'

let g:gutentags_define_advanced_commands = 1

""设置标签tags
set tags=./.tags;,.tags
"设置根据打开文件自动更换目录
set autochdir

" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
    let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
    let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.tmp/tags')
let g:gutentags_cache_dir = s:vim_tags
" 检测 ~/.cache/tags 不存在就新建 "
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazSl', '--extras=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
let g:gutentags_ctags_extra_args += ['--fortran-kinds=+imv']
let g:gutentags_ctags_extra_args += ['--markdown-kinds=+cs']

" Get ctags version
let g:ctags_version = system('ctags --version')[0:8]

" 如果使用 universal ctags 需要增加下面一行
if g:ctags_version == "Universal"
  let g:gutentags_ctags_extra_args += ['--extras=+q', '--output-format=e-ctags']
endif

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 1
"Change focus to quickfix window after search (optional).
let g:gutentags_plus_switch = 1
"Enable advanced commands: GutentagsToggleTrace, etc.
let g:gutentags_define_advanced_commands = 1
let g:gutentags_trace = 0

""cscope
if has("cscope")
    if executable('gtags-cscope') && executable('gtags')
        "禁用原GscopeFind按键映射
        let g:gutentags_plus_nomap = 1
        "Find this C symbol 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
        nmap <C-\>s :GscopeFind s <C-R>=expand("<cword>")<CR><CR>
        "Find this difinition 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
        nmap <C-\>g :GscopeFind g <C-R>=expand("<cword>")<CR><CR>
        "Find functions called by this function 查找本函数调用的函数
        nmap <C-\>d :GscopeFind d <C-R>=expand("<cword>")<CR><CR>
        "Find functions calling this function 查找调用本函数的函数
        nmap <C-\>c :GscopeFind c <C-R>=expand("<cword>")<CR><CR>
        "Find this text string 查找指定的字符串
        nmap <C-\>t :GscopeFind t <C-R>=expand("<cword>")<CR><CR>
        "Find this egrep pattern 查找egrep模式，相当于egrep功能，但查找速度快多了
        nmap <C-\>e :GscopeFind e <C-R>=expand("<cword>")<CR><CR>
        "Find this file 查找并打开文件，类似vim的能
        nmap <C-\>f :GscopeFind f <C-R>=expand("<cfile>")<CR><CR>
        "Find files #including this file 查找包含本文件的文件
        nmap <C-\>i :GscopeFind i ^<C-R>=expand("<cfile>")<CR>$<CR>
    else
        set csto=1
        set cst
        set nocsverb
        " add any database in current directory
        if filereadable("cscope.out")
            cs add cscope.out
        endif
        set csverb

        nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
        nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>

        nmap <C-F12> :cs add cscope.out<CR>
        "F12用ctags生成tags
        nmap <F12> :!ctags -R --c++-kinds=+p --fields=+ialS --extra=+q -f .tags<CR>
        "--language-force=C++
        nmap <S-F12> :!cscope -Rbkq<CR>
        " cscope参数
        "-R: 在生成索引文件时，搜索子目录树中的代码
        "-b: 只生成索引文件，不进入cscope的界面
        "-d: 只调出cscope gui界面，不跟新cscope.out
        "-k: 在生成索引文件时，不搜索/usr/include目录
        "-q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度
        "-i: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用"-"，表示由标准输入获得文件列表。
        "-I dir: 在-I选项指出的目录中查找头文件
        "-u: 扫描所有文件，重新生成交叉索引文件
        "-C: 在搜索时忽略大小写
        "-P path: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用
    endif
endif


"Plugin 'vim-scripts/OmniCppComplete'
"let OmniCpp_MayCompleteDot=1    "打开 .  操作符
"let OmniCpp_MayCompleteArrow=1  "打开 -> 操作符
"let OmniCpp_MayCompleteScope=1  "打开 :: 操作符
"let OmniCpp_NamespaceSearch=1   "打开命名空间
"let OmniCpp_GlobalScopeSearch=1
"let OmniCpp_DefaultNamespace=["std"]
"let OmniCpp_ShowPrototypeInAbbr=1  "打开显示函数原型
"let OmniCpp_SelectFirstItem = 2    "自动弹出时自动跳至第一个

set completeopt=menu


"}}}


Plugin 'skywind3000/gutentags_plus'

" enable gtags module
let g:gutentags_modules = ['ctags', 'gtags_cscope']

" config project root markers.
let g:gutentags_project_root = ['.root']


Plugin 'majutsushi/tagbar'
let g:tagbar_ctags_bin='ctags'            "ctags程序的路径
let g:tagbar_width=30                    "窗口宽度的设置
"let g:tagbar_vertical=30 "窗口宽度的设置
let g:tagbar_autofocus=1
map <F3> :Tagbar<CR>

call vundle#end()            " required

filetype plugin indent on    " required

" CTags的设定
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let Tlist_Auto_Open=1
let Tlist_Sort_Type = "name"    " 按照名称排序
let Tlist_Use_Right_Window = 1  " 在右侧显示窗口
let Tlist_Compart_Format = 1    " 压缩方式
let Tlist_Show_One_File = 1 "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exist_OnlyWindow = 1  " 如果只有一个buffer，kill窗口也kill掉buffer
let Tlist_File_Fold_Auto_Close = 0  " 不要关闭其他文件的tags
let Tlist_Enable_Fold_Column = 0    " 不要显示折叠树
let Tlist_Exit_OnlyWindow=1
if has('win32')
    let Tlist_Ctags_Cmd = 'ctags.exe'
endif
let tlist_make_settings  = 'make;m:makros;t:targets'

"}}}

" ==============================================================================
" vundle命令
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal

"}}}==============================================================================

syntax on		"设置语法高亮
"set rnu

"------------------------------------------------------------------------------"
"   一些普通性设置                                                             "
"------------------------------------------------------------------------------"
filetype on
filetype plugin on
filetype indent on	"自动检测文件类型并进行缩进高亮

setlocal cinoptions=:4,g0,t0
setlocal expandtab smarttab shiftwidth=4 softtabstop=4 tabstop=4

"----------set 系列---------
set sessionoptions+=unix,slash
set fileformat=unix
colorscheme desert
set number      	    " 设置行号
set foldenable
set fdm=marker         " 设置折叠
set foldmarker={{{,}}} " 折叠标志，这个是默认的
set foldcolumn=2 " 折叠位宽
if has('win32')
    set guifont=Consolas:h14
    "set guifont=Bitstream_Vera_Sans_Mono \12
    "set gfw=KaiTi_GB2312:h12
    "新細明體：PMingLiU
    "細明體：MingLiU
    "標楷體：DFKai-SB
    "黑体：SimHei
    "宋体：SimSun
    "新宋体：NSimSun
    "仿宋：FangSong
    "楷体：KaiTi
    "仿宋_GB2312：FangSong_GB2312
    "楷体_GB2312：KaiTi_GB2312
    "微軟正黑體：Microsoft JhengHei
    "微软雅黑体：
    "set gfw=Microsoft\ YaHei:h12
    set gfw=SimHei:h14
endif
if has('unix')
    set guifont=DejaVu\ Sans\ Mono\ 14
    "set guifont=Noto\ Mono\ Regular\ 14
endif
set nobomb
set nocompatible	    " 避免以前版本的一些bug和局限
set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936,chinese
set encoding=utf-8
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
set backspace=2		    " 使backspace键可以删除
set scrolloff=3         " 光标移动到buffer的顶部和底部时保持3行距离
set formatoptions=tcrqn " 自动格式化
set autoindent          " 继承前一行的缩进方式，特别适用于多行注释
set expandtab           " 用空格代替制表符
set showmatch           " 显示匹配的括号
set matchtime=5         " 匹配括号高亮的时间（单位是十分之一秒）
set noignorecase          " 在搜索的时候忽略大小写
"set incsearch           " 在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）
set hlsearch
set novisualbell        " 不要闪烁
set cursorline          " 高亮显示当前行
set grepprg=grep\ -nH\ $*
set autoread            " 设置当文件被改动时自动载入
set autowrite           "自动保存
set tabstop=4           "设置制表符宽度"
set softtabstop=4
"set textwidth=10000000
"set fo+=tMm
set cc=80
set shiftwidth=4        "设置缩进的空格数"
set nowrap                "设置自动断行
set nobackup            "禁止生成备份文件"
set noswapfile          "禁止生成swap文件"
set iskeyword+=_,$,@,%,#,- " 带有如下符号的单词不要被换行分割
"------------------------------------------------------------------------------"
"状态栏相关的设置[包括文件路径、文件类型、坐标、所占比例、时间等]
"------------------------------------------------------------------------------"
set statusline=%F%m%r%h%w
if has('unix')
    "set statusline+=%{fugitive#statusline()}
endif
set statusline+=\ %=[FORMAT=%{&ff}]
set statusline+=\ %{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\"}
set statusline+=\ [TYPE=%Y]\ [POS=%l,%v][%p%%]
set statusline+=\ %{strftime(\"%Y/%m/%d\ %H:%M\")}
highlight StatusLine   guifg=SlateBlue guibg=Black ctermfg=Blue ctermbg=Black" 状态行颜色
highlight StatusLineNC guifg=SlateBlue guibg=Black ctermfg=Blue ctermbg=Black" 状态行颜色
set laststatus=2 " //使得状态栏和命令行分开
set ruler " 在编辑过程中，在右下角显示光标位置的状态行

"autocmd BufWritePre *.* :%s/\s\+$//e

set cursorline

if version >= 700 " 进入插入模式时改变状态栏颜色（仅限于Vim 7）
    au InsertEnter * hi StatusLine guibg=#818D29 guifg=#FCFCFC gui=none
    au InsertLeave * hi StatusLine guibg=Blue guifg=SlateBlue gui=none
endif

set report=0 " 通过使用: commands命令，告诉我们文件的哪一行被改变过
set shortmess=atI                                     "去掉欢迎界面
" " 禁止显示菜单和工具条
set guioptions-=m  "隐藏菜单栏"
set guioptions-=T   "隐藏工具栏"
set guioptions-=r
set guioptions-=L


set clipboard=unnamed "共享剪贴板
" Copy to X CLIPBOARD
vmap cc :w !xsel -i -b<CR><CR>
"vmap cp :w !xsel -i -p<CR><CR>
"vmap cs :w !xsel -i -s<CR><CR>
"" " Paste from X CLIPBOARD
"nmap pp :r!xsel -p<CR><CR>
"nmap ps :r!xsel -s<CR><CR>
"nmap pb :r!xsel -b<CR><CR>
"au InsertLeave * silent! w

set dictionary=$HOME/words
set dictionary+=/usr/share/dict/words
set dictionary+=./words.dict
set dictionary+=./../words.dict
set dictionary+=./../../words.dict
set dictionary+=./../../../words.dict


set autochdir

if has("autocmd")
    " 记住上次文件打开的位置
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    au BufRead      *.py2,*.py3 set filetype=python
endif


func Set()
    "自动补全括号"
    inoremap ( ()<ESC>i
    inoremap [ []<ESC>i
    inoremap { {}<ESC>i
    inoremap $ $$<ESC>i
    inoremap " ""<ESC>i
    inoremap 《 《》<ESC>i
    inoremap “ “”<ESC>i
endfunc

"+++++++++++++++++++++++++++ Python ++++++++++++++++++++++++++++++++++++++++++


""""""""""""""""""""""""For Markdown"""""""""""""""""""""""""""""""""""{{{
func! Handler(channel, msg)
    echo a:msg
endfunc

func!  MdIab()

    set wrap nolist
    set cc=0
    set tw=0
    iab iday <c-r>=strftime("20%y年%m月%d日 %H:%M:%S")<cr>
endfunc

func! Md2Doc()
    "let cmd="pandoc -s --mathjax=file:///usr/share/javascript/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML --wrap=preserve --columns=80 --toc "
    let cmd="pandoc -s --mathjax --wrap=preserve --columns=80 --toc "
    let cmd.="-f markdown+east_asian_line_breaks+multiline_tables "
    if filereadable("reference.docx")
        let cmd.="--reference-doc=reference.docx "
    endif

    if filereadable(expand("%:r").".bib")
        let cmd.="--filter pandoc-citeproc --bibliography=".expand("%:r").".bib "
    elseif filereadable("ref.bib")
        let cmd.="--filter pandoc-citeproc --bibliography=ref.bib "
    endif

    let cmd.="-t docx ".expand("%"). " -o ".expand("%:r").".docx"

    "echom cmd
    return job_start(cmd, {'callback': 'Handler'})
    "return job_start(cmd)
endfunc

func! Md2Htm()
    "let cmd="pandoc -s --mathjax=file:///usr/share/javascript/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML --wrap=preserve --columns=80 --toc "
    let cmd="pandoc --mathml --wrap=preserve --columns=80 --toc "
    let cmd.="-f markdown+east_asian_line_breaks+multiline_tables "
    if filereadable(expand("%:r").".css")
        let cmd.="--css=".expand("%:r").".css "
    elseif filereadable("ref.css")
        let cmd.="--css=ref.css "
    endif

    if filereadable(expand("%:r").".bib")
        let cmd.="--filter pandoc-citeproc --bibliography=".expand("%:r").".bib "
    elseif filereadable("ref.bib")
        let cmd.="--filter pandoc-citeproc --bibliography=ref.bib "
    endif

    let cmd.="-t html ".expand("%"). " -o ". expand("%:r").".html"

    "echom cmd
    return job_start(cmd, {'callback': 'Handler'})
    "return job_start(cmd)
endfunc

func! PrvHtm()
    " TODO
    if has('win32')
        let cmd=""
        let cmd.=expand("%:r").".html"
    elseif has('unix')
        let cmd ="firefox  "
        let cmd.=expand("%:r").".html"
    elseif has('macos')

    endif

    echom cmd

    return job_start(cmd, {'callback': 'Handler'})
endfunc

"autocmd BufWritePost * call system("ctags -R")

function! AutoGen()
        call Md2Doc()
        call Md2Htm()
endfunc

func! Main() abort

    call MdIab()

    "map <F3> :Voom pandoc<cr>
    map <F5> :call Md2Htm()<cr>
    map <F6> :call Md2Doc()<cr>
    map <F8> :call PrvHtm()<cr>

    let g:tagbar_type_markdown = {
            \ 'ctagstype' : 'markdown',
            \ 'deffile' :'markdown.ctags',
            \ 'kinds' : [
            \ 'h:headings',
            \ ],
            \ 'sort' : 0
            \ }

endfunc

autocmd BufRead      *.md,*.mkd,*.markdown,*.page call Main()
"autocmd BufWritePost *.md,*.mkd,*.markdown call AutoGen()
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}


"set makeprg=make\ -C\ ./gcc/\ -f\ makefile
"==================================================
"for cscope
"=================================================
set cscopequickfix=s-,c-,d-,i-,t-,e-

if has("cscope")
    "set csprg=/usr/bin/cscope
    set csto=1
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
endif

nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let s:extfname = expand("%:e")
if s:extfname ==? "f90"
    let fortran_free_source=1
    unlet! fortran_fixed_source
elseif s:extfname ==? "F90"
    let fortran_free_source=1
    unlet! fortran_fixed_source
else
    let fortran_fixed_source=1
    unlet! fortran_free_source
endif
let fortran_more_precise=1
"去掉固定格式每行开头的红色填充
let fortran_have_tabs=1
"允许折叠
let fortran_do_enddo=1
let fortran_fold=1
let fortran_fold_conditionals=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Template 
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
let g:UltiSnipsSnippetDirectories=["UltiSnips", $HOME.'/.snippets/']

